from random import random, randint
import json

def random_tree(generate_node, depth=0):
    node = generate_node()

    if depth > 0 and random() > 1/depth:
        return node

    children = randint(1, 5)
    node["children"] = [ random_tree(generate_node, depth + 1) for _ in range(children) ]

    return node

job_counter = 1
def generate_job():
    global job_counter
    id = job_counter
    job_counter += 1

    return {
        "id": id
    }

job_tree = random_tree(generate_job)

def create_workflow_jobs(tree, parent=None):
    job = tree
    id = job["id"]

    workflow_job = {
        "name": f"Runs job {id}",
        "runs-on": "ubuntu-latest",
        "steps": [
            {
                "run": f"echo 'Job {id} done!'"
            }
        ]
    }

    if parent != None:
        workflow_job["needs"] = [ f"job-{parent}" ]

    jobs = {
        f"job-{id}": workflow_job
    }

    if "children" in job:
        for child in job["children"]:
            jobs |= create_workflow_jobs(child, id)

    return jobs

workflow = {
    "name": "Autogenerated workflow",
    "on": "push",
    "jobs": create_workflow_jobs(job_tree)
}

print(json.dumps(workflow))
