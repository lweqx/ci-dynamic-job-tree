name: Dynamic job tree test
on:
  push:
    branches: [main]
jobs:
  do-the-thing:
    name: Runs the job tree
    runs-on: ubuntu-latest
    steps:
      - name: Repository checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.ACCESS_TOKEN }}
      - name: Generates a random job tree
        run: |
          python3 generate-job-tree.py > .github/workflows/generated.yaml
      - name: Commit workflow
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .github/workflows/generated.yaml
          git switch --create ci
          git commit --message "Add generated workflow"
          git push --force --set-upstream origin ci
      - name: Fetch workflow run id
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          REPOSITORY: ${{ github.repository }}
        run: |
          fetch_run_id() {
            RUN_ID=$(
              curl -s \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$REPOSITORY/actions/runs?head_sha=$(git rev-parse ci) | jq .workflow_runs[].id
            )
          }

          fetch_run_id
          while [ -z "$RUN_ID" ]; do
            sleep 5
            fetch_run_id
          done

          echo $RUN_ID > run_id
      - name: Add link to the generated workflow run in the summary
        env:
          REPOSITORY: ${{ github.repository }}
        run: |
          echo "[Workflow run](https://github.com/$REPOSITORY/actions/runs/$(cat run_id)/)" >> $GITHUB_STEP_SUMMARY
      - name: Waiting on the triggered workflow run
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          REPOSITORY: ${{ github.repository }}
        run: |
          fetch_conclusion() {
            CONCLUSION=$(
              curl -s \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$REPOSITORY/actions/runs/$(cat run_id) | jq .conclusion | tr -d '"'
            )
          }

          fetch_conclusion
          while [ "$CONCLUSION" = "null" ]; do
            sleep 5
            fetch_conclusion
          done

          if [ "$CONCLUSION" != "success" ]; then
            exit 1
          fi
